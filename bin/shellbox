#!/bin/bash
set -euo pipefail

SHELLBOX_HOME="/usr/local/shellbox"
BIN_DIR="$SHELLBOX_HOME/bin"
LOG_DIR="$SHELLBOX_HOME/log"
CONTAINERS_DIR="$SHELLBOX_HOME/containers"
LIB_DIR="$SHELLBOX_HOME/lib"
TEMPLATE_PATH="$LIB_DIR/runsh_template.sh"
UNINSTALL_SCRIPT="$LIB_DIR/uninstall.sh"
DEFAULT_IMAGE="gcr.io/distroless/base-debian12:debug-nonroot"
VERSION_FILE="$SHELLBOX_HOME/VERSION"

# ÂàùÊúüÂåñ
init_shellbox() {
    echo "Initializing ShellBox..."
    mkdir -p "$BIN_DIR" "$LOG_DIR" "$CONTAINERS_DIR"
    echo "‚úÖ „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÊàê„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü„ÄÇ"
}

# ShellBox„Ç≥„Éû„É≥„Éâ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã
install_command() {
    local CMD_NAME="$1"
    local ENTRYPOINT_CMD="$2"
    local IMAGE="$3"
    local FORCE="${4:-}"

    local CMD_DIR="$CONTAINERS_DIR/$CMD_NAME"
    local SCRIPT_PATH="$BIN_DIR/$CMD_NAME"
    local CMD_IMAGE="shellbox_$CMD_NAME"

    local MOUNTS_TEMPLATE="$LIB_DIR/mounts_template.conf"
    local MOUNTS_CONF_PATH="$CMD_DIR/mounts.conf"
    local DOCKERFILE_TEMPLATE="$LIB_DIR/dockerfile_template.Dockerfile"
    local DOCKERFILE_PATH="$CMD_DIR/Dockerfile"

    echo "Installing command: $CMD_NAME"
    echo "Using base image: $IMAGE"
    echo "Container ENTRYPOINT: $ENTRYPOINT_CMD"

    if [[ "$FORCE" != "force" ]]; then
        if ! podman run --rm "$IMAGE" sh -c "command -v $ENTRYPOINT_CMD" > /dev/null 2>&1; then
            echo "‚ùå „Ç®„É©„Éº: „Ç§„É°„Éº„Ç∏ '$IMAGE' „Å´„Ç≥„Éû„É≥„Éâ '$ENTRYPOINT_CMD' „ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ"
            echo "üí° busybox„Å™„Å©„ÅßÊòéÁ§∫ÁöÑ„Å´Á∂öË°å„Åô„Çã„Å´„ÅØ: shellbox install ... --force"
            return 1
        fi
    else
        echo "‚ö† --force ÊåáÂÆö„Å´„Çà„Çä ENTRYPOINT Â≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü„ÄÇ"
    fi

    mkdir -p "$CMD_DIR"

    # install Dockerfile and build-image
    if [[ ! -f "$DOCKERFILE_TEMPLATE" ]]; then
        echo "‚ùå „Ç®„É©„Éº: Dockerfile „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $DOCKERFILE_TEMPLATE"
        return 1
    fi

    sed -e "s|{{IMAGE}}|$IMAGE|g" \
        -e "s|{{ENTRYPOINT}}|$ENTRYPOINT_CMD|g" \
        "$DOCKERFILE_TEMPLATE" > "$DOCKERFILE_PATH"

    podman build -t "$CMD_IMAGE" "$CMD_DIR"

    # install runsh-script
    if [[ ! -f "$TEMPLATE_PATH" ]]; then
        echo "‚ùå „Ç®„É©„Éº: ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $TEMPLATE_PATH"
        return 1
    fi

    sed -e "s|{{CMD_IMAGE}}|$CMD_IMAGE|g" \
        -e "s|{{CMD_NAME}}|$CMD_NAME|g" \
        "$TEMPLATE_PATH" > "$SCRIPT_PATH"
    chmod +x "$SCRIPT_PATH"

    # install mounts.conf
    if [[ -f "$MOUNTS_TEMPLATE" ]]; then
        cp "$MOUNTS_TEMPLATE" "$MOUNTS_CONF_PATH"
        echo "ü™µ mounts.conf „Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: $MOUNTS_CONF_PATH"
    else
        echo "‚ö†Ô∏è  mounts_template.conf „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $MOUNTS_TEMPLATE"
    fi

    echo "‚úÖ „Ç≥„Éû„É≥„Éâ '$CMD_NAME' „Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Åæ„Åó„Åü„ÄÇ"
}

# „Ç¢„É≥„Ç§„É≥„Çπ„Éà„Éº„É´
uninstall_shellbox() {
    if [ -x "$UNINSTALL_SCRIPT" ]; then
        bash "$UNINSTALL_SCRIPT"
    else
        echo "‚ö† uninstall.sh „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $UNINSTALL_SCRIPT"
        echo "ÊâãÂãï„Åß $SHELLBOX_HOME „ÇíÂâäÈô§„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    fi
}

# „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Ê©üËÉΩÁæ§
edit_command() {
    local CMD="$1"
    local TARGET="$BIN_DIR/$CMD"
    [[ -f "$TARGET" ]] && "${EDITOR:-vi}" "$TARGET" || echo "‚ùå $CMD „ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ"
}

# ShellBox„Ç≥„Éû„É≥„Éâ‰∏ÄË¶ßË°®Á§∫
list_commands() {
    echo "üì¶ ShellBox„Ç≥„Éû„É≥„Éâ‰∏ÄË¶ß:"
    find "$BIN_DIR" -type f -exec basename {} \; | sort
}

# ShellBox„Ç≥„Éû„É≥„ÉâÂâäÈô§
remove_command() {
    local CMD="$1"
    rm -f "$BIN_DIR/$CMD"
    rm -rf "$CONTAINERS_DIR/$CMD"
    echo "üóëÔ∏è '$CMD' „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ"
}

# ShellBox„Éë„ÇπË°®Á§∫
show_paths() {
    echo "ShellBoxÊßãÊàê„Éë„Çπ:"
    echo "  BIN_DIR:         $BIN_DIR"
    echo "  LOG_DIR:         $LOG_DIR"
    echo "  CONTAINERS_DIR:  $CONTAINERS_DIR"
    echo "  LIB_DIR:         $LIB_DIR"
}

# ShellBox„Éû„Ç¶„É≥„ÉàË®≠ÂÆöÁ∑®ÈõÜ
edit_mounts() {
    local CMD_NAME="$1"
    local MOUNTS_PATH="$CONTAINERS_DIR/$CMD_NAME/mounts.conf"
    local TEMPLATE="$LIB_DIR/mounts_template.conf"

    if [[ ! -d "$CONTAINERS_DIR/$CMD_NAME" ]]; then
        echo "‚ùå '$CMD_NAME' „ÅØ„Åæ„Å†„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ"
        return 1
    fi

    if [[ ! -f "$MOUNTS_PATH" && -f "$TEMPLATE" ]]; then
        cp "$TEMPLATE" "$MOUNTS_PATH"
        echo "üìÑ mounts.conf „Çí„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ"
    fi

    local EDITOR_CMD="${EDITOR:-vi}"
    $EDITOR_CMD "$MOUNTS_PATH"
}

# ShellBox„Ç≥„Éû„É≥„ÉâÂÜçÊßãÁØâ
rebuild_command() {
    local CMD_NAME="$1"
    local FORCE="${2:-}"
    local CMD_DIR="$CONTAINERS_DIR/$CMD_NAME"
    local SCRIPT_PATH="$BIN_DIR/$CMD_NAME"
    local CMD_IMAGE="shellbox_$CMD_NAME"

    # DockerfileÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
    if [[ ! -f "$CMD_DIR/Dockerfile" ]]; then
        echo "‚ùå Dockerfile „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $CMD_DIR/Dockerfile"
        echo "   „Åì„ÅÆ„Ç≥„Éû„É≥„Éâ„ÅØÂæ©ÂÖÉ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ"
        return 1
    fi

    # ‰∏äÊõ∏„ÅçÁ¢∫Ë™ç
    if [[ -f "$SCRIPT_PATH" && "$FORCE" != "--force" ]]; then
        echo "‚ö†Ô∏è Êó¢„Å´„Ç≥„Éû„É≥„Éâ„Çπ„ÇØ„É™„Éó„Éà„ÅåÂ≠òÂú®„Åó„Å¶„ÅÑ„Åæ„Åô: $SCRIPT_PATH"
        echo "   ‰∏äÊõ∏„Åç„Åô„Çã„Å´„ÅØ --force „Çí‰ªò„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        return 1
    fi

    echo "üî® „Ç§„É°„Éº„Ç∏„ÇíÂÜç„Éì„É´„Éâ‰∏≠: $CMD_IMAGE"
    podman build -t "$CMD_IMAGE" "$CMD_DIR"

    if [[ ! -f "$TEMPLATE_PATH" ]]; then
        echo "‚ùå ÂÆüË°å„Çπ„ÇØ„É™„Éó„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $TEMPLATE_PATH"
        return 1
    fi

    echo "üìÑ ShellBox„Çπ„ÇØ„É™„Éó„Éà„ÇíÂÜçÁîüÊàê‰∏≠: $SCRIPT_PATH"
    sed -e "s|{{CMD_IMAGE}}|$CMD_IMAGE|g" \
        -e "s|{{CMD_NAME}}|$CMD_NAME|g" \
        "$TEMPLATE_PATH" > "$SCRIPT_PATH"
    chmod +x "$SCRIPT_PATH"

    echo "‚úÖ „Ç≥„Éû„É≥„Éâ '$CMD_NAME' „ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü„ÄÇ"
}

# „É°„Ç§„É≥Âá¶ÁêÜ
case "${1:-}" in
    --version)
        [[ -f "$VERSION_FILE" ]] && cat "$VERSION_FILE" || echo "„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        ;;
    init) init_shellbox ;;
    install)
        if [ -z "${2:-}" ] || [ -z "${3:-}" ]; then
            echo "Usage: shellbox install <sb_command_name> <entrypoint_cmd> [base_image] (optional)"
            echo "       Add -f or --force to skip entrypoint existence check"
            exit 1
        fi
        FORCE_FLAG=""
        if [[ "${4:-}" == "-f" || "${4:-}" == "--force" ]]; then
            FORCE_FLAG="force"
            install_command "$2" "$3" "$DEFAULT_IMAGE" "$FORCE_FLAG"
        elif [[ "${5:-}" == "-f" || "${5:-}" == "--force" ]]; then
            FORCE_FLAG="force"
            install_command "$2" "$3" "$4" "$FORCE_FLAG"
        else
            install_command "$2" "$3" "${4:-$DEFAULT_IMAGE}" "$FORCE_FLAG"
        fi
        ;;
    edit-mounts)
        shift
        edit_mounts "$@"
        ;;
    rebuild)
        if [[ -z "${2:-}" ]]; then
            echo "Usage: shellbox rebuild <sb_command_name> [--force]"
            exit 1
        fi
        CMD_NAME="$2"
        FORCE_FLAG="${3:-}"
        rebuild_command "$CMD_NAME" "$FORCE_FLAG"
        ;;
    uninstall) uninstall_shellbox ;;
    -e) edit_command "$2" ;;
    -l) list_commands ;;
    -r) remove_command "$2" ;;
    --path) show_paths ;;
    *)
        echo "Usage: shellbox [ init | install | uninstall | rebuild |---edit-mounts <cmd> | -version | -e <cmd> | -l | -r <cmd> | --path ]"
        exit 1
        ;;
esac
